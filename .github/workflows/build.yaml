on:
  push:
    branches:
      - production

permissions:
  id-token: write
  contents: read

jobs:
  deploy_to_staging:
    runs-on: ubuntu-latest
    environment: production
    outputs:
      version-id: ${{ steps.deploy-to-lambda.outputs.VERSION_ID }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
      - name: Execute Gradle build
        run: gradle build
      - uses: actions/upload-artifact@v4
        with:
          name: inventory.zip
          path: build/distributions/inventory.zip

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          role-session-name: samplerolesession
          aws-region: ${{ vars.AWS_REGION }}

      - name: deploy to lambda
        id: deploy-to-lambda
        run: |
          VERSION_ID=`aws lambda update-function-code --function-name ${{ vars.FUNCTION_ARN }} --zip-file fileb://build/distributions/inventory.zip  --publish --query 'Version' --output text`
          aws lambda update-alias --function-name ${{ vars.FUNCTION_ARN }} --function-version $VERSION_ID --name staging
          echo "VERSION_ID=$VERSION_ID" >> $GITHUB_OUTPUT
  deploy_to_production:
    runs-on: ubuntu-latest
    needs: [deploy_to_staging]
    environment: production
    env:
      PR_NUMBER: ${{ needs.check-pr.outputs.pr-number }}
    steps:
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          role-session-name: samplerolesession
          aws-region: ${{ vars.AWS_REGION }}
      - name: deploy to lambda
        run: |
          aws lambda update-alias --function-name ${{ vars.FUNCTION_ARN }} --function-version ${{ env.VERSION_ID }} --name production